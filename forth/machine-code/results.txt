Test 1: x 3 + 4 x + 5 6 * 7 x + + + +
=====================================
Stack before optimizing:
- [0]: SSA[6] (SSA[0] + SSA[5])

SSA before optimizing:
- SSA[0] (x + #3)
- SSA[1] (#4 + x)
- SSA[2] (#5 * #6)
- SSA[3] (#7 + x)
- SSA[4] (SSA[2] + SSA[3])
- SSA[5] (SSA[1] + SSA[4])
- SSA[6] (SSA[0] + SSA[5])

Stack after optimizing:
- [0]: SSA[6] (SSA[0] + SSA[5])

SSA after optimizing:
- SSA[0] (x + #3)
- SSA[1] (#4 + x)
- SSA[2] (#5 * #6)
- SSA[3] (#7 + x)
- SSA[4] (#30 + SSA[1001])
- SSA[5] (SSA[1000] + SSA[1003])
- SSA[6] (SSA[0] + SSA[5])
- SSA[1000] (x + #4) from normalize
- SSA[1001] (x + #7) from normalize
- SSA[1002] (SSA[1001] + #30) from normalize
- SSA[1003] (x + #37) from commutative

Final output
- load SSA[6] (SSA[0] + SSA[5])
- store stack[8]
- SP+=1
- Done


Test 2: DUP
===========
Stack before optimizing:
- [0]: initial[7]

SSA before optimizing:
- None

Stack after optimizing:
- [0]: initial[7]

SSA after optimizing:
- None

Final output
- load initial[7]
- store stack[8]
- SP+=1
- Done


Test 3: DROP
============
Stack before optimizing:
- Empty

SSA before optimizing:
- None

Stack after optimizing:
- Empty

SSA after optimizing:
- None

Final output
- SP+=-1
- Done


Test 4: DUP DROP
================
Stack before optimizing:
- Empty

SSA before optimizing:
- None

Stack after optimizing:
- Empty

SSA after optimizing:
- None

Final output
- Done


Test 5: OVER OVER DUP
=====================
Stack before optimizing:
- [2]: initial[6]
- [1]: initial[7]
- [0]: initial[7]

SSA before optimizing:
- None

Stack after optimizing:
- [2]: initial[6]
- [1]: initial[7]
- [0]: initial[7]

SSA after optimizing:
- None

Final output
- load initial[6]
- store stack[8]
- load initial[7]
- store stack[9]
- store stack[10]
- SP+=3
- Done


Test 6: SWAP
============
Stack before optimizing:
- [1]: initial[7]
- [0]: initial[6]

SSA before optimizing:
- None

Stack after optimizing:
- [1]: initial[7]
- [0]: initial[6]

SSA after optimizing:
- None

Final output
- load initial[7]
- store stack[6]
- load initial[6]
- store stack[7]
- Done


Test 7: DUP SWAP DROP
=====================
Stack before optimizing:
- Empty

SSA before optimizing:
- None

Stack after optimizing:
- Empty

SSA after optimizing:
- None

Final output
- Done


Test 8: 2 3 SWAP
================
Stack before optimizing:
- [1]: #3
- [0]: #2

SSA before optimizing:
- None

Stack after optimizing:
- [1]: #3
- [0]: #2

SSA after optimizing:
- None

Final output
- load #3
- store stack[8]
- load #2
- store stack[9]
- SP+=2
- Done


Test 9: 2 3 NIP
===============
Stack before optimizing:
- [0]: #3

SSA before optimizing:
- None

Stack after optimizing:
- [0]: #3

SSA after optimizing:
- None

Final output
- load #3
- store stack[8]
- SP+=1
- Done


Test 10: DUP AND DUP OR DUP XOR
===============================
Stack before optimizing:
- [0]: SSA[2] (SSA[1] xor SSA[1])

SSA before optimizing:
- SSA[0] (initial[7] and initial[7])
- SSA[1] (SSA[0] or SSA[0])
- SSA[2] (SSA[1] xor SSA[1])

Stack after optimizing:
- [0]: SSA[2] (SSA[1] xor SSA[1])

SSA after optimizing:
- SSA[0] (initial[7] and initial[7])
- SSA[1] (initial[7] or initial[7])
- SSA[2] (initial[7] xor initial[7])

Final output
- load SSA[2] (SSA[1] xor SSA[1])
- store stack[7]
- Done


Test 11: x 0 AND x 0 OR x 0 XOR
===============================
Stack before optimizing:
- [2]: SSA[0] (x and #0)
- [1]: SSA[1] (x or #0)
- [0]: SSA[2] (x xor #0)

SSA before optimizing:
- SSA[0] (x and #0)
- SSA[1] (x or #0)
- SSA[2] (x xor #0)

Stack after optimizing:
- [2]: SSA[0] (x and #0)
- [1]: SSA[1] (x or #0)
- [0]: SSA[2] (x xor #0)

SSA after optimizing:
- SSA[0] (x and #0)
- SSA[1] (x or #0)
- SSA[2] (x xor #0)

Final output
- load SSA[0] (x and #0)
- store stack[8]
- load SSA[1] (x or #0)
- store stack[9]
- load SSA[2] (x xor #0)
- store stack[10]
- SP+=3
- Done


Test 12: x -1 AND x -1 OR x -1 XOR
==================================
Stack before optimizing:
- [2]: SSA[0] (x and #-1)
- [1]: SSA[1] (x or #-1)
- [0]: SSA[2] (x xor #-1)

SSA before optimizing:
- SSA[0] (x and #-1)
- SSA[1] (x or #-1)
- SSA[2] (x xor #-1)

Stack after optimizing:
- [2]: SSA[0] (x and #-1)
- [1]: SSA[1] (x or #-1)
- [0]: SSA[2] (x xor #-1)

SSA after optimizing:
- SSA[0] (x and #-1)
- SSA[1] (x or #-1)
- SSA[2] (x xor #-1)

Final output
- load SSA[0] (x and #-1)
- store stack[8]
- load SSA[1] (x or #-1)
- store stack[9]
- load SSA[2] (x xor #-1)
- store stack[10]
- SP+=3
- Done


Test 13: 2 - x - - 5 -
======================
Stack before optimizing:
- [0]: SSA[3] (SSA[2] - #5)

SSA before optimizing:
- SSA[0] (initial[7] - #2)
- SSA[1] (SSA[0] - x)
- SSA[2] (initial[6] - SSA[1])
- SSA[3] (SSA[2] - #5)

Stack after optimizing:
- [0]: SSA[3] (SSA[2] - #5)

SSA after optimizing:
- SSA[0] (initial[7] - #2)
- SSA[1] (SSA[1000] - x)
- SSA[2] (initial[6] - SSA[1])
- SSA[3] (SSA[2] - #5)
- SSA[1000] (initial[7] + #-2) from normalize
- SSA[1001] (SSA[2] + #-5) from normalize

Final output
- load SSA[3] (SSA[2] - #5)
- store stack[6]
- SP+=-1
- Done


Test 14: x 3 + x 4 + 5 6 * 7 x + + + +
======================================
Stack before optimizing:
- [0]: SSA[6] (SSA[0] + SSA[5])

SSA before optimizing:
- SSA[0] (x + #3)
- SSA[1] (x + #4)
- SSA[2] (#5 * #6)
- SSA[3] (#7 + x)
- SSA[4] (SSA[2] + SSA[3])
- SSA[5] (SSA[1] + SSA[4])
- SSA[6] (SSA[0] + SSA[5])

Stack after optimizing:
- [0]: SSA[6] (SSA[0] + SSA[5])

SSA after optimizing:
- SSA[0] (x + #3)
- SSA[1] (x + #4)
- SSA[2] (#5 * #6)
- SSA[3] (#7 + x)
- SSA[4] (#30 + SSA[1000])
- SSA[5] (SSA[1] + SSA[1002])
- SSA[6] (SSA[0] + SSA[5])
- SSA[1000] (x + #7) from normalize
- SSA[1001] (SSA[1000] + #30) from normalize
- SSA[1002] (x + #37) from commutative

Final output
- load SSA[6] (SSA[0] + SSA[5])
- store stack[8]
- SP+=1
- Done


Test 15: x x
============
Stack before optimizing:
- [1]: x
- [0]: x

SSA before optimizing:
- None

Stack after optimizing:
- [1]: x
- [0]: x

SSA after optimizing:
- None

Final output
- load x
- store stack[8]
- load x
- store stack[9]
- SP+=2
- Done


Test 16: x 2 + x y + 2 +
========================
Stack before optimizing:
- [1]: SSA[0] (x + #2)
- [0]: SSA[2] (SSA[1] + #2)

SSA before optimizing:
- SSA[0] (x + #2)
- SSA[1] (x + y)
- SSA[2] (SSA[1] + #2)

Stack after optimizing:
- [1]: SSA[0] (x + #2)
- [0]: SSA[2] (SSA[1] + #2)

SSA after optimizing:
- SSA[0] (x + #2)
- SSA[1] (x + y)
- SSA[2] (SSA[1] + #2)

Final output
- load SSA[0] (x + #2)
- store stack[8]
- load SSA[2] (SSA[1] + #2)
- store stack[9]
- SP+=2
- Done


Test 17: x 1 - dup 1 +
======================
Stack before optimizing:
- [1]: SSA[0] (x - #1)
- [0]: SSA[1] (SSA[0] + #1)

SSA before optimizing:
- SSA[0] (x - #1)
- SSA[1] (SSA[0] + #1)

Stack after optimizing:
- [1]: SSA[0] (x - #1)
- [0]: SSA[1] (SSA[0] + #1)

SSA after optimizing:
- SSA[0] (x - #1)
- SSA[1] (SSA[0] + #1)

Final output
- load SSA[0] (x - #1)
- store stack[8]
- load SSA[1] (SSA[0] + #1)
- store stack[9]
- SP+=2
- Done


Test 18: 1 x * x 0 * x 0 +
==========================
Stack before optimizing:
- [2]: SSA[0] (#1 * x)
- [1]: SSA[1] (x * #0)
- [0]: SSA[2] (x + #0)

SSA before optimizing:
- SSA[0] (#1 * x)
- SSA[1] (x * #0)
- SSA[2] (x + #0)

Stack after optimizing:
- [2]: SSA[0] (#1 * x)
- [1]: SSA[1] (x * #0)
- [0]: SSA[2] (x + #0)

SSA after optimizing:
- SSA[0] (#1 * x)
- SSA[1] (x * #0)
- SSA[2] (x + #0)
- SSA[1000] (x * #1) from normalize

Final output
- load SSA[0] (#1 * x)
- store stack[8]
- load SSA[1] (x * #0)
- store stack[9]
- load SSA[2] (x + #0)
- store stack[10]
- SP+=3
- Done


Test 19: 2 x 1 * + 3 +
======================
Stack before optimizing:
- [0]: SSA[2] (SSA[1] + #3)

SSA before optimizing:
- SSA[0] (x * #1)
- SSA[1] (#2 + SSA[0])
- SSA[2] (SSA[1] + #3)

Stack after optimizing:
- [0]: SSA[2] (SSA[1] + #3)

SSA after optimizing:
- SSA[0] (x * #1)
- SSA[1] (#2 + x)
- SSA[2] (SSA[1000] + #3)
- SSA[1000] (x + #2)
- SSA[1001] (SSA[0] + #5) from commutative
- SSA[1002] (x + #2) from normalize

Final output
- load SSA[2] (SSA[1] + #3)
- store stack[8]
- SP+=1
- Done


Test 20: x 1 + to_x
===================
- Unknown: to_x
- Aborting test


Test 21: x 1 + to_x x
=====================
- Unknown: to_x
- Aborting test


