Test 1: x x 5 + y - x + /
=========================
Stack before optimizing:
- [0]: SSA[3] (x * 1/SSA[2])

SSA before optimizing:
- SSA[0] (x + #5)
- SSA[1] (SSA[0] + -y)
- SSA[2] (SSA[1] + x)
- SSA[3] (x * 1/SSA[2])

Stack after optimizing:
- [0]: SSA[3] (x * 1/SSA[2])

SSA after optimizing:
- SSA[0] (#5 + x)
- SSA[1] (#5 + x + -y)
- SSA[2] (#5 + x + x + -y)
- SSA[3] (x * 1/SSA[2])

Final output
- load SSA[3] (x * 1/SSA[2])
- store stack[8]
- SP+=1
- Done


Test 2: x x 5 * y / x * -
=========================
Stack before optimizing:
- [0]: SSA[3] (x + -SSA[2])

SSA before optimizing:
- SSA[0] (x * #5)
- SSA[1] (SSA[0] * 1/y)
- SSA[2] (SSA[1] * x)
- SSA[3] (x + -SSA[2])

Stack after optimizing:
- [0]: SSA[3] (x + -SSA[2])

SSA after optimizing:
- SSA[0] (#5 * x)
- SSA[1] (#5 * x * 1/y)
- SSA[2] (#5 * x * x * 1/y)
- SSA[3] (x + -SSA[2])

Final output
- load SSA[3] (x + -SSA[2])
- store stack[8]
- SP+=1
- Done


Test 3: x x 5 * x / *
=====================
Stack before optimizing:
- [0]: SSA[2] (x * SSA[1])

SSA before optimizing:
- SSA[0] (x * #5)
- SSA[1] (SSA[0] * 1/x)
- SSA[2] (x * SSA[1])

Stack after optimizing:
- [0]: SSA[2] (#5 * x * x * 1/x)

SSA after optimizing:
- SSA[0] (#5 * x)
- SSA[1] (#5 * x * 1/x)
- SSA[2] (#5 * x * x * 1/x)

Final output
- load SSA[2] (#5 * x * x * 1/x)
- store stack[8]
- SP+=1
- Done


Test 4: 2 -3 - x DUP DUP - -
============================
Stack before optimizing:
- [1]: SSA[0] (#2 + #3)
- [0]: SSA[2] (x + -SSA[1])

SSA before optimizing:
- SSA[0] (#2 + #3)
- SSA[1] (x + -x)
- SSA[2] (x + -SSA[1])

Stack after optimizing:
- [1]: SSA[0] (#5)
- [0]: SSA[2] (x)

SSA after optimizing:
- SSA[0] (#5)
- SSA[1] (#0)
- SSA[2] (x)

Final output
- load SSA[0] (#5)
- store stack[8]
- load SSA[2] (x)
- store stack[9]
- SP+=2
- Done


Test 5: x x x x - DUP DUP - - - -
=================================
Stack before optimizing:
- [0]: SSA[4] (x + -SSA[3])

SSA before optimizing:
- SSA[0] (x + -x)
- SSA[1] (SSA[0] + -SSA[0])
- SSA[2] (SSA[0] + -SSA[1])
- SSA[3] (x + -SSA[2])
- SSA[4] (x + -SSA[3])

Stack after optimizing:
- [0]: SSA[4] (#0)

SSA after optimizing:
- SSA[0] (#0)
- SSA[1] (#0)
- SSA[2] (#0)
- SSA[3] (x)
- SSA[4] (#0)

Final output
- load SSA[4] (#0)
- store stack[8]
- SP+=1
- Done


Test 6: x 3 + 4 x + 5 6 * 7 x + + + + x -
=========================================
Stack before optimizing:
- [0]: SSA[7] (SSA[6] + -x)

SSA before optimizing:
- SSA[0] (x + #3)
- SSA[1] (#4 + x)
- SSA[2] (#5 * #6)
- SSA[3] (#7 + x)
- SSA[4] (SSA[2] + SSA[3])
- SSA[5] (SSA[1] + SSA[4])
- SSA[6] (SSA[0] + SSA[5])
- SSA[7] (SSA[6] + -x)

Stack after optimizing:
- [0]: SSA[7] (#14 + x + x + SSA[2])

SSA after optimizing:
- SSA[0] (#3 + x)
- SSA[1] (#4 + x)
- SSA[2] (#5 * #6)
- SSA[3] (#7 + x)
- SSA[4] (#7 + x + SSA[2])
- SSA[5] (#11 + x + x + SSA[2])
- SSA[6] (#14 + x + x + x + SSA[2])
- SSA[7] (#14 + x + x + SSA[2])

Final output
- load SSA[7] (#14 + x + x + SSA[2])
- store stack[8]
- SP+=1
- Done


Test 7: DUP
===========
Stack before optimizing:
- [0]: initial[7]

SSA before optimizing:
- None

Stack after optimizing:
- [0]: initial[7]

SSA after optimizing:
- None

Final output
- load initial[7]
- store stack[8]
- SP+=1
- Done


Test 8: DROP
============
Stack before optimizing:
- Empty

SSA before optimizing:
- None

Stack after optimizing:
- Empty

SSA after optimizing:
- None

Final output
- SP+=-1
- Done


Test 9: DUP DROP
================
Stack before optimizing:
- Empty

SSA before optimizing:
- None

Stack after optimizing:
- Empty

SSA after optimizing:
- None

Final output
- Done


Test 10: OVER OVER DUP
======================
Stack before optimizing:
- [2]: initial[6]
- [1]: initial[7]
- [0]: initial[7]

SSA before optimizing:
- None

Stack after optimizing:
- [2]: initial[6]
- [1]: initial[7]
- [0]: initial[7]

SSA after optimizing:
- None

Final output
- load initial[6]
- store stack[8]
- load initial[7]
- store stack[9]
- store stack[10]
- SP+=3
- Done


Test 11: SWAP
=============
Stack before optimizing:
- [1]: initial[7]
- [0]: initial[6]

SSA before optimizing:
- None

Stack after optimizing:
- [1]: initial[7]
- [0]: initial[6]

SSA after optimizing:
- None

Final output
- load initial[7]
- store stack[6]
- load initial[6]
- store stack[7]
- Done


Test 12: DUP SWAP DROP
======================
Stack before optimizing:
- Empty

SSA before optimizing:
- None

Stack after optimizing:
- Empty

SSA after optimizing:
- None

Final output
- Done


Test 13: 2 3 SWAP
=================
Stack before optimizing:
- [1]: #3
- [0]: #2

SSA before optimizing:
- None

Stack after optimizing:
- [1]: #3
- [0]: #2

SSA after optimizing:
- None

Final output
- load #3
- store stack[8]
- load #2
- store stack[9]
- SP+=2
- Done


Test 14: 2 3 NIP
================
Stack before optimizing:
- [0]: #3

SSA before optimizing:
- None

Stack after optimizing:
- [0]: #3

SSA after optimizing:
- None

Final output
- load #3
- store stack[8]
- SP+=1
- Done


Test 15: DUP AND DUP OR DUP XOR
===============================
Stack before optimizing:
- [0]: SSA[2] (SSA[1] xor SSA[1])

SSA before optimizing:
- SSA[0] (initial[7] and initial[7])
- SSA[1] (SSA[0] or SSA[0])
- SSA[2] (SSA[1] xor SSA[1])

Stack after optimizing:
- [0]: SSA[2] (SSA[1] xor SSA[1])

SSA after optimizing:
- SSA[0] (initial[7] and initial[7])
- SSA[1] (SSA[0] or SSA[0])
- SSA[2] (SSA[1] xor SSA[1])

Final output
- load SSA[2] (SSA[1] xor SSA[1])
- store stack[7]
- Done


Test 16: x 0 AND x 0 OR x 0 XOR
===============================
Stack before optimizing:
- [2]: SSA[0] (x and #0)
- [1]: SSA[1] (x or #0)
- [0]: SSA[2] (x xor #0)

SSA before optimizing:
- SSA[0] (x and #0)
- SSA[1] (x or #0)
- SSA[2] (x xor #0)

Stack after optimizing:
- [2]: SSA[0] (#0 and x)
- [1]: SSA[1] (#0 or x)
- [0]: SSA[2] (#0 xor x)

SSA after optimizing:
- SSA[0] (#0 and x)
- SSA[1] (#0 or x)
- SSA[2] (#0 xor x)

Final output
- load SSA[0] (#0 and x)
- store stack[8]
- load SSA[1] (#0 or x)
- store stack[9]
- load SSA[2] (#0 xor x)
- store stack[10]
- SP+=3
- Done


Test 17: x -1 AND x -1 OR x -1 XOR
==================================
Stack before optimizing:
- [2]: SSA[0] (x and #-1)
- [1]: SSA[1] (x or #-1)
- [0]: SSA[2] (x xor #-1)

SSA before optimizing:
- SSA[0] (x and #-1)
- SSA[1] (x or #-1)
- SSA[2] (x xor #-1)

Stack after optimizing:
- [2]: SSA[0] (#-1 and x)
- [1]: SSA[1] (#-1 or x)
- [0]: SSA[2] (#-1 xor x)

SSA after optimizing:
- SSA[0] (#-1 and x)
- SSA[1] (#-1 or x)
- SSA[2] (#-1 xor x)

Final output
- load SSA[0] (#-1 and x)
- store stack[8]
- load SSA[1] (#-1 or x)
- store stack[9]
- load SSA[2] (#-1 xor x)
- store stack[10]
- SP+=3
- Done


Test 18: 2 - x - - 5 -
======================
Stack before optimizing:
- [0]: SSA[3] (SSA[2] + #-5)

SSA before optimizing:
- SSA[0] (initial[7] + #-2)
- SSA[1] (SSA[0] + -x)
- SSA[2] (initial[6] + -SSA[1])
- SSA[3] (SSA[2] + #-5)

Stack after optimizing:
- [0]: SSA[3] (initial[6] + -initial[7] + #-3 + x)

SSA after optimizing:
- SSA[0] (initial[7] + #-2)
- SSA[1] (initial[7] + #-2 + -x)
- SSA[2] (initial[6] + -initial[7] + #2 + x)
- SSA[3] (initial[6] + -initial[7] + #-3 + x)

Final output
- load SSA[3] (initial[6] + -initial[7] + #-3 + x)
- store stack[6]
- SP+=-1
- Done


Test 19: x 3 + x 4 + 5 6 * 7 x + + + +
======================================
Stack before optimizing:
- [0]: SSA[6] (SSA[0] + SSA[5])

SSA before optimizing:
- SSA[0] (x + #3)
- SSA[1] (x + #4)
- SSA[2] (#5 * #6)
- SSA[3] (#7 + x)
- SSA[4] (SSA[2] + SSA[3])
- SSA[5] (SSA[1] + SSA[4])
- SSA[6] (SSA[0] + SSA[5])

Stack after optimizing:
- [0]: SSA[6] (#14 + x + x + x + SSA[2])

SSA after optimizing:
- SSA[0] (#3 + x)
- SSA[1] (#4 + x)
- SSA[2] (#5 * #6)
- SSA[3] (#7 + x)
- SSA[4] (#7 + x + SSA[2])
- SSA[5] (#11 + x + x + SSA[2])
- SSA[6] (#14 + x + x + x + SSA[2])

Final output
- load SSA[6] (#14 + x + x + x + SSA[2])
- store stack[8]
- SP+=1
- Done


Test 20: x x
============
Stack before optimizing:
- [1]: x
- [0]: x

SSA before optimizing:
- None

Stack after optimizing:
- [1]: x
- [0]: x

SSA after optimizing:
- None

Final output
- load x
- store stack[8]
- load x
- store stack[9]
- SP+=2
- Done


Test 21: x 2 + x y + 2 +
========================
Stack before optimizing:
- [1]: SSA[0] (x + #2)
- [0]: SSA[2] (SSA[1] + #2)

SSA before optimizing:
- SSA[0] (x + #2)
- SSA[1] (x + y)
- SSA[2] (SSA[1] + #2)

Stack after optimizing:
- [1]: SSA[0] (#2 + x)
- [0]: SSA[2] (#2 + x + y)

SSA after optimizing:
- SSA[0] (#2 + x)
- SSA[1] (x + y)
- SSA[2] (#2 + x + y)

Final output
- load SSA[0] (#2 + x)
- store stack[8]
- load SSA[2] (#2 + x + y)
- store stack[9]
- SP+=2
- Done


Test 22: x 1 - dup 1 +
======================
Stack before optimizing:
- [1]: SSA[0] (x + #-1)
- [0]: SSA[1] (SSA[0] + #1)

SSA before optimizing:
- SSA[0] (x + #-1)
- SSA[1] (SSA[0] + #1)

Stack after optimizing:
- [1]: SSA[0] (#-1 + x)
- [0]: SSA[1] (#0 + x)

SSA after optimizing:
- SSA[0] (#-1 + x)
- SSA[1] (#0 + x)

Final output
- load SSA[0] (#-1 + x)
- store stack[8]
- load SSA[1] (#0 + x)
- store stack[9]
- SP+=2
- Done


Test 23: 1 x * x 0 * x 0 +
==========================
Stack before optimizing:
- [2]: SSA[0] (#1 * x)
- [1]: SSA[1] (x * #0)
- [0]: SSA[2] (x + #0)

SSA before optimizing:
- SSA[0] (#1 * x)
- SSA[1] (x * #0)
- SSA[2] (x + #0)

Stack after optimizing:
- [2]: SSA[0] (#1 * x)
- [1]: SSA[1] (#0 * x)
- [0]: SSA[2] (#0 + x)

SSA after optimizing:
- SSA[0] (#1 * x)
- SSA[1] (#0 * x)
- SSA[2] (#0 + x)

Final output
- load SSA[0] (#1 * x)
- store stack[8]
- load SSA[1] (#0 * x)
- store stack[9]
- load SSA[2] (#0 + x)
- store stack[10]
- SP+=3
- Done


Test 24: 2 x 1 * + 3 +
======================
Stack before optimizing:
- [0]: SSA[2] (SSA[1] + #3)

SSA before optimizing:
- SSA[0] (x * #1)
- SSA[1] (#2 + SSA[0])
- SSA[2] (SSA[1] + #3)

Stack after optimizing:
- [0]: SSA[2] (#5 + SSA[0])

SSA after optimizing:
- SSA[0] (#1 * x)
- SSA[1] (#2 + SSA[0])
- SSA[2] (#5 + SSA[0])

Final output
- load SSA[2] (#5 + SSA[0])
- store stack[8]
- SP+=1
- Done


Test 25: x 1 + to_x
===================
- Unknown: to_x
- Aborting test


Test 26: x 1 + to_x x
=====================
- Unknown: to_x
- Aborting test


