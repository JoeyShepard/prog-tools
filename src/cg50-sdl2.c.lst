 GNU assembler version 2.42 (x86_64-linux-gnu)
	 using BFD version (GNU Binutils for Ubuntu) 2.42.
 options passed	: -I --64 -aghlns=src/cg50-sdl2.c.lst 
 input file    	: /tmp/ccDj0fOD.s
 output file   	: sdl2/cg50-sdl2.o
 target        	: x86_64-pc-linux-gnu
 time stamp    	: 2025-03-16T09:20:31.000-0400

   1              		.file	"cg50-sdl2.c"
   2              		.text
   3              		.section	.rodata.str1.8,"aMS",@progbits,1
   4              		.align 8
   5              	.LC1:
   6 0000 4572726F 		.string	"Error: failed to allocate memory for calculator heap."
   6      723A2066 
   6      61696C65 
   6      6420746F 
   6      20616C6C 
   7 0036 0000     		.align 8
   8              	.LC2:
   9 0038 4572726F 		.string	"Error: failed to allocate memory for calculator XRAM."
   9      723A2066 
   9      61696C65 
   9      6420746F 
   9      20616C6C 
  10 006e 0000     		.align 8
  11              	.LC3:
  12 0070 4572726F 		.string	"Error: SDL2 did not initialize. SDL error: %s\n"
  12      723A2053 
  12      444C3220 
  12      64696420 
  12      6E6F7420 
  13              		.section	.rodata.str1.1,"aMS",@progbits,1
  14              	.LC4:
  15 0000 53444C32 		.string	"SDL2 wrapper for fx-CG50"
  15      20777261 
  15      70706572 
  15      20666F72 
  15      2066782D 
  16              		.section	.rodata.str1.8
  17 009f 00       		.align 8
  18              	.LC5:
  19 00a0 4572726F 		.string	"Error: SDL2 could not create window. SDL error: %s\n"
  19      723A2053 
  19      444C3220 
  19      636F756C 
  19      64206E6F 
  20              		.text
  21              		.p2align 4
  22              		.globl	setup
  23              		.type	setup, @function
  24              	setup:
  25              	.LFB6512:
  26              		.cfi_startproc
  27 0000 F30F1EFA 		endbr64
  28 0004 55       		pushq	%rbp
  29              		.cfi_def_cfa_offset 16
  30              		.cfi_offset 6, -16
  31 0005 89F5     		movl	%esi, %ebp
  32 0007 53       		pushq	%rbx
  33              		.cfi_def_cfa_offset 24
  34              		.cfi_offset 3, -24
  35 0008 89FB     		movl	%edi, %ebx
  36 000a BF000020 		movl	$2097152, %edi
  36      00
  37 000f 4883EC08 		subq	$8, %rsp
  38              		.cfi_def_cfa_offset 32
  39 0013 E8000000 		call	malloc@PLT
  39      00
  40 0018 48890500 		movq	%rax, heap(%rip)
  40      000000
  41 001f 4885C0   		testq	%rax, %rax
  42 0022 0F84E100 		je	.L13
  42      0000
  43 0028 BF002000 		movl	$8192, %edi
  43      00
  44 002d E8000000 		call	malloc@PLT
  44      00
  45 0032 48890500 		movq	%rax, xram(%rip)
  45      000000
  46 0039 4885C0   		testq	%rax, %rax
  47 003c 0F84B100 		je	.L4
  47      0000
  48 0042 BF002000 		movl	$8192, %edi
  48      00
  49 0047 E8000000 		call	malloc@PLT
  49      00
  50 004c 48890500 		movq	%rax, yram(%rip)
  50      000000
  51 0053 4885C0   		testq	%rax, %rax
  52 0056 0F849700 		je	.L4
  52      0000
  53 005c BF200000 		movl	$32, %edi
  53      00
  54 0061 891D0000 		movl	%ebx, global_scale_factor(%rip)
  54      0000
  55 0067 892D0000 		movl	%ebp, global_delay_ms(%rip)
  55      0000
  56 006d E8000000 		call	SDL_Init@PLT
  56      00
  57 0072 85C0     		testl	%eax, %eax
  58 0074 0F88CA00 		js	.L14
  58      0000
  59 007a 69CB8C01 		imull	$396, %ebx, %ecx
  59      0000
  60 0080 BA0000FF 		movl	$536805376, %edx
  60      1F
  61 0085 BE0000FF 		movl	$536805376, %esi
  61      1F
  62 008a 41B90400 		movl	$4, %r9d
  62      0000
  63 0090 4469C3E0 		imull	$224, %ebx, %r8d
  63      000000
  64 0097 488D3D00 		leaq	.LC4(%rip), %rdi
  64      000000
  65 009e E8000000 		call	SDL_CreateWindow@PLT
  65      00
  66 00a3 48890500 		movq	%rax, window(%rip)
  66      000000
  67 00aa 4889C7   		movq	%rax, %rdi
  68 00ad 4885C0   		testq	%rax, %rax
  69 00b0 746D     		je	.L15
  70 00b2 BA020000 		movl	$2, %edx
  70      00
  71 00b7 BEFFFFFF 		movl	$-1, %esi
  71      FF
  72 00bc E8000000 		call	SDL_CreateRenderer@PLT
  72      00
  73 00c1 41B8E000 		movl	$224, %r8d
  73      0000
  74 00c7 B98C0100 		movl	$396, %ecx
  74      00
  75 00cc BA010000 		movl	$1, %edx
  75      00
  76 00d1 4889C7   		movq	%rax, %rdi
  77 00d4 BE021015 		movl	$353701890, %esi
  77      15
  78 00d9 48890500 		movq	%rax, renderer(%rip)
  78      000000
  79 00e0 E8000000 		call	SDL_CreateTexture@PLT
  79      00
  80 00e5 48890500 		movq	%rax, texture(%rip)
  80      000000
  81 00ec 4883C408 		addq	$8, %rsp
  82              		.cfi_remember_state
  83              		.cfi_def_cfa_offset 24
  84 00f0 5B       		popq	%rbx
  85              		.cfi_def_cfa_offset 16
  86 00f1 5D       		popq	%rbp
  87              		.cfi_def_cfa_offset 8
  88 00f2 C3       		ret
  89              	.L4:
  90              		.cfi_restore_state
  91 00f3 488D3D00 		leaq	.LC2(%rip), %rdi
  91      000000
  92 00fa E8000000 		call	puts@PLT
  92      00
  93 00ff BF010000 		movl	$1, %edi
  93      00
  94 0104 E8000000 		call	exit@PLT
  94      00
  95              	.L13:
  96 0109 488D3D00 		leaq	.LC1(%rip), %rdi
  96      000000
  97 0110 E8000000 		call	puts@PLT
  97      00
  98 0115 BF010000 		movl	$1, %edi
  98      00
  99 011a E8000000 		call	exit@PLT
  99      00
 100              	.L15:
 101 011f E8000000 		call	SDL_GetError@PLT
 101      00
 102 0124 488D3500 		leaq	.LC5(%rip), %rsi
 102      000000
 103 012b 4889C2   		movq	%rax, %rdx
 104              	.L11:
 105 012e BF020000 		movl	$2, %edi
 105      00
 106 0133 31C0     		xorl	%eax, %eax
 107 0135 E8000000 		call	__printf_chk@PLT
 107      00
 108 013a BF010000 		movl	$1, %edi
 108      00
 109 013f E8000000 		call	exit@PLT
 109      00
 110              	.L14:
 111 0144 E8000000 		call	SDL_GetError@PLT
 111      00
 112 0149 488D3500 		leaq	.LC3(%rip), %rsi
 112      000000
 113 0150 4889C2   		movq	%rax, %rdx
 114 0153 EBD9     		jmp	.L11
 115              		.cfi_endproc
 116              	.LFE6512:
 117              		.size	setup, .-setup
 118 0155 66662E0F 		.p2align 4
 118      1F840000 
 118      000000
 119              		.globl	gint_osmenu
 120              		.type	gint_osmenu, @function
 121              	gint_osmenu:
 122              	.LFB6514:
 123              		.cfi_startproc
 124 0160 F30F1EFA 		endbr64
 125 0164 C3       		ret
 126              		.cfi_endproc
 127              	.LFE6514:
 128              		.size	gint_osmenu, .-gint_osmenu
 129 0165 66662E0F 		.p2align 4
 129      1F840000 
 129      000000
 130              		.globl	gint_poweroff
 131              		.type	gint_poweroff, @function
 132              	gint_poweroff:
 133              	.LFB6515:
 134              		.cfi_startproc
 135 0170 F30F1EFA 		endbr64
 136 0174 C3       		ret
 137              		.cfi_endproc
 138              	.LFE6515:
 139              		.size	gint_poweroff, .-gint_poweroff
 140 0175 66662E0F 		.p2align 4
 140      1F840000 
 140      000000
 141              		.globl	wrapper_exit
 142              		.type	wrapper_exit, @function
 143              	wrapper_exit:
 144              	.LFB6516:
 145              		.cfi_startproc
 146 0180 F30F1EFA 		endbr64
 147 0184 50       		pushq	%rax
 148              		.cfi_def_cfa_offset 16
 149 0185 58       		popq	%rax
 150              		.cfi_def_cfa_offset 8
 151 0186 4883EC08 		subq	$8, %rsp
 152              		.cfi_def_cfa_offset 16
 153 018a 488B3D00 		movq	texture(%rip), %rdi
 153      000000
 154 0191 E8000000 		call	SDL_DestroyTexture@PLT
 154      00
 155 0196 488B3D00 		movq	renderer(%rip), %rdi
 155      000000
 156 019d E8000000 		call	SDL_DestroyRenderer@PLT
 156      00
 157 01a2 488B3D00 		movq	window(%rip), %rdi
 157      000000
 158 01a9 E8000000 		call	SDL_DestroyWindow@PLT
 158      00
 159 01ae E8000000 		call	SDL_Quit@PLT
 159      00
 160 01b3 31FF     		xorl	%edi, %edi
 161 01b5 E8000000 		call	exit@PLT
 161      00
 162              		.cfi_endproc
 163              	.LFE6516:
 164              		.size	wrapper_exit, .-wrapper_exit
 165              		.section	.rodata
 166              		.align 32
 167              	.LC0:
 168 0000 04000000 		.long	4
 169 0004 61000000 		.long	97
 170 0008 05000000 		.long	5
 171 000c 62000000 		.long	98
 172 0010 06000000 		.long	6
 173 0014 63000000 		.long	99
 174 0018 07000000 		.long	7
 175 001c 64000000 		.long	100
 176 0020 08000000 		.long	8
 177 0024 65000000 		.long	101
 178 0028 09000000 		.long	9
 179 002c 66000000 		.long	102
 180 0030 0A000000 		.long	10
 181 0034 51000000 		.long	81
 182 0038 0B000000 		.long	11
 183 003c 52000000 		.long	82
 184 0040 0C000000 		.long	12
 185 0044 53000000 		.long	83
 186 0048 0D000000 		.long	13
 187 004c 54000000 		.long	84
 188 0050 0E000000 		.long	14
 189 0054 55000000 		.long	85
 190 0058 0F000000 		.long	15
 191 005c 56000000 		.long	86
 192 0060 10000000 		.long	16
 193 0064 41000000 		.long	65
 194 0068 11000000 		.long	17
 195 006c 42000000 		.long	66
 196 0070 12000000 		.long	18
 197 0074 43000000 		.long	67
 198 0078 13000000 		.long	19
 199 007c 31000000 		.long	49
 200 0080 14000000 		.long	20
 201 0084 32000000 		.long	50
 202 0088 15000000 		.long	21
 203 008c 33000000 		.long	51
 204 0090 16000000 		.long	22
 205 0094 34000000 		.long	52
 206 0098 17000000 		.long	23
 207 009c 35000000 		.long	53
 208 00a0 18000000 		.long	24
 209 00a4 21000000 		.long	33
 210 00a8 19000000 		.long	25
 211 00ac 22000000 		.long	34
 212 00b0 1A000000 		.long	26
 213 00b4 23000000 		.long	35
 214 00b8 1B000000 		.long	27
 215 00bc 24000000 		.long	36
 216 00c0 1C000000 		.long	28
 217 00c4 25000000 		.long	37
 218 00c8 1D000000 		.long	29
 219 00cc 11000000 		.long	17
 220 00d0 1E000000 		.long	30
 221 00d4 21000000 		.long	33
 222 00d8 1F000000 		.long	31
 223 00dc 22000000 		.long	34
 224 00e0 20000000 		.long	32
 225 00e4 23000000 		.long	35
 226 00e8 21000000 		.long	33
 227 00ec 31000000 		.long	49
 228 00f0 22000000 		.long	34
 229 00f4 32000000 		.long	50
 230 00f8 23000000 		.long	35
 231 00fc 33000000 		.long	51
 232 0100 24000000 		.long	36
 233 0104 41000000 		.long	65
 234 0108 25000000 		.long	37
 235 010c 42000000 		.long	66
 236 0110 26000000 		.long	38
 237 0114 43000000 		.long	67
 238 0118 27000000 		.long	39
 239 011c 11000000 		.long	17
 240 0120 28000000 		.long	40
 241 0124 15000000 		.long	21
 242 0128 29000000 		.long	41
 243 012c 74000000 		.long	116
 244 0130 2A000000 		.long	42
 245 0134 44000000 		.long	68
 246 0138 2B000000 		.long	43
 247 013c 61000000 		.long	97
 248 0140 2C000000 		.long	44
 249 0144 12000000 		.long	18
 250 0148 2D000000 		.long	45
 251 014c 25000000 		.long	37
 252 0150 2E000000 		.long	46
 253 0154 12000000 		.long	18
 254 0158 2F000000 		.long	47
 255 015c 24000000 		.long	36
 256 0160 30000000 		.long	48
 257 0164 25000000 		.long	37
 258 0168 31000000 		.long	49
 259 016c 00000000 		.long	0
 260 0170 33000000 		.long	51
 261 0174 00000000 		.long	0
 262 0178 34000000 		.long	52
 263 017c 13000000 		.long	19
 264 0180 35000000 		.long	53
 265 0184 00000000 		.long	0
 266 0188 36000000 		.long	54
 267 018c 55000000 		.long	85
 268 0190 37000000 		.long	55
 269 0194 12000000 		.long	18
 270 0198 38000000 		.long	56
 271 019c 35000000 		.long	53
 272 01a0 39000000 		.long	57
 273 01a4 71000000 		.long	113
 274 01a8 3A000000 		.long	58
 275 01ac 91000000 		.long	145
 276 01b0 3B000000 		.long	59
 277 01b4 92000000 		.long	146
 278 01b8 3C000000 		.long	60
 279 01bc 93000000 		.long	147
 280 01c0 3D000000 		.long	61
 281 01c4 94000000 		.long	148
 282 01c8 3E000000 		.long	62
 283 01cc 95000000 		.long	149
 284 01d0 3F000000 		.long	63
 285 01d4 96000000 		.long	150
 286 01d8 40000000 		.long	64
 287 01dc 00000000 		.long	0
 288 01e0 41000000 		.long	65
 289 01e4 00000000 		.long	0
 290 01e8 42000000 		.long	66
 291 01ec 00000000 		.long	0
 292 01f0 43000000 		.long	67
 293 01f4 00000000 		.long	0
 294 01f8 44000000 		.long	68
 295 01fc 00000000 		.long	0
 296 0200 45000000 		.long	69
 297 0204 00000000 		.long	0
 298 0208 4A000000 		.long	74
 299 020c 00000000 		.long	0
 300 0210 4B000000 		.long	75
 301 0214 00000000 		.long	0
 302 0218 4C000000 		.long	76
 303 021c 44000000 		.long	68
 304 0220 4D000000 		.long	77
 305 0224 00000000 		.long	0
 306 0228 4E000000 		.long	78
 307 022c 00000000 		.long	0
 308 0230 4F000000 		.long	79
 309 0234 76000000 		.long	118
 310 0238 50000000 		.long	80
 311 023c 85000000 		.long	133
 312 0240 51000000 		.long	81
 313 0244 75000000 		.long	117
 314 0248 52000000 		.long	82
 315 024c 86000000 		.long	134
 316 0250 54000000 		.long	84
 317 0254 35000000 		.long	53
 318 0258 55000000 		.long	85
 319 025c 34000000 		.long	52
 320 0260 56000000 		.long	86
 321 0264 25000000 		.long	37
 322 0268 57000000 		.long	87
 323 026c 24000000 		.long	36
 324 0270 58000000 		.long	88
 325 0274 15000000 		.long	21
 326 0278 59000000 		.long	89
 327 027c 21000000 		.long	33
 328 0280 5A000000 		.long	90
 329 0284 22000000 		.long	34
 330 0288 5B000000 		.long	91
 331 028c 23000000 		.long	35
 332 0290 5C000000 		.long	92
 333 0294 31000000 		.long	49
 334 0298 5D000000 		.long	93
 335 029c 32000000 		.long	50
 336 02a0 5E000000 		.long	94
 337 02a4 33000000 		.long	51
 338 02a8 5F000000 		.long	95
 339 02ac 41000000 		.long	65
 340 02b0 60000000 		.long	96
 341 02b4 42000000 		.long	66
 342 02b8 61000000 		.long	97
 343 02bc 43000000 		.long	67
 344 02c0 62000000 		.long	98
 345 02c4 11000000 		.long	17
 346 02c8 63000000 		.long	99
 347 02cc 12000000 		.long	18
 348 02d0 E1000000 		.long	225
 349 02d4 81000000 		.long	129
 350 02d8 E5000000 		.long	229
 351 02dc 81000000 		.long	129
 352 02e0 00000000 		.long	0
 353 02e4 00000000 		.long	0
 354              		.text
 355 01ba 660F1F44 		.p2align 4
 355      0000
 356              		.globl	wrapper_convert_key
 357              		.type	wrapper_convert_key, @function
 358              	wrapper_convert_key:
 359              	.LFB6518:
 360              		.cfi_startproc
 361 01c0 F30F1EFA 		endbr64
 362 01c4 4881ECF8 		subq	$760, %rsp
 362      020000
 363              		.cfi_def_cfa_offset 768
 364 01cb 4189F8   		movl	%edi, %r8d
 365 01ce B95D0000 		movl	$93, %ecx
 365      00
 366 01d3 BA040000 		movl	$4, %edx
 366      00
 367 01d8 64488B04 		movq	%fs:40, %rax
 367      25280000 
 367      00
 368 01e1 48898424 		movq	%rax, 744(%rsp)
 368      E8020000 
 369 01e9 31C0     		xorl	%eax, %eax
 370 01eb 4989E1   		movq	%rsp, %r9
 371 01ee 488D3500 		leaq	.LC0(%rip), %rsi
 371      000000
 372 01f5 4C89CF   		movq	%r9, %rdi
 373 01f8 F348A5   		rep movsq
 374 01fb EB0F     		jmp	.L23
 375 01fd 0F1F00   		.p2align 4,,10
 376              		.p2align 3
 377              	.L21:
 378 0200 4883C002 		addq	$2, %rax
 379 0204 418B1481 		movl	(%r9,%rax,4), %edx
 380 0208 85D2     		testl	%edx, %edx
 381 020a 740D     		je	.L20
 382              	.L23:
 383 020c 4139D0   		cmpl	%edx, %r8d
 384 020f 75EF     		jne	.L21
 385 0211 83C001   		addl	$1, %eax
 386 0214 4898     		cltq
 387 0216 8B1484   		movl	(%rsp,%rax,4), %edx
 388              	.L20:
 389 0219 488B8424 		movq	744(%rsp), %rax
 389      E8020000 
 390 0221 64482B04 		subq	%fs:40, %rax
 390      25280000 
 390      00
 391 022a 750A     		jne	.L27
 392 022c 89D0     		movl	%edx, %eax
 393 022e 4881C4F8 		addq	$760, %rsp
 393      020000
 394              		.cfi_remember_state
 395              		.cfi_def_cfa_offset 8
 396 0235 C3       		ret
 397              	.L27:
 398              		.cfi_restore_state
 399 0236 E8000000 		call	__stack_chk_fail@PLT
 399      00
 400              		.cfi_endproc
 401              	.LFE6518:
 402              		.size	wrapper_convert_key, .-wrapper_convert_key
 403 023b 0F1F4400 		.p2align 4
 403      00
 404              		.globl	wrapper_events
 405              		.type	wrapper_events, @function
 406              	wrapper_events:
 407              	.LFB6517:
 408              		.cfi_startproc
 409 0240 F30F1EFA 		endbr64
 410 0244 55       		pushq	%rbp
 411              		.cfi_def_cfa_offset 16
 412              		.cfi_offset 6, -16
 413 0245 488D2D00 		leaq	keys(%rip), %rbp
 413      000000
 414 024c 53       		pushq	%rbx
 415              		.cfi_def_cfa_offset 24
 416              		.cfi_offset 3, -24
 417 024d 4883EC48 		subq	$72, %rsp
 418              		.cfi_def_cfa_offset 96
 419 0251 64488B04 		movq	%fs:40, %rax
 419      25280000 
 419      00
 420 025a 48894424 		movq	%rax, 56(%rsp)
 420      38
 421 025f 31C0     		xorl	%eax, %eax
 422 0261 4889E3   		movq	%rsp, %rbx
 423              		.p2align 4,,10
 424 0264 0F1F4000 		.p2align 3
 425              	.L32:
 426 0268 4889DF   		movq	%rbx, %rdi
 427 026b E8000000 		call	SDL_PollEvent@PLT
 427      00
 428 0270 85C0     		testl	%eax, %eax
 429 0272 7459     		je	.L36
 430              	.L33:
 431 0274 8B0424   		movl	(%rsp), %eax
 432 0277 3D000100 		cmpl	$256, %eax
 432      00
 433 027c 7466     		je	.L30
 434 027e 3D000300 		cmpl	$768, %eax
 434      00
 435 0283 75E3     		jne	.L32
 436 0285 8B7C2410 		movl	16(%rsp), %edi
 437 0289 E8000000 		call	wrapper_convert_key
 437      00
 438 028e 4889DF   		movq	%rbx, %rdi
 439 0291 89C1     		movl	%eax, %ecx
 440 0293 48630500 		movslq	keys_end(%rip), %rax
 440      000000
 441 029a 4889C2   		movq	%rax, %rdx
 442 029d 894C8500 		movl	%ecx, 0(%rbp,%rax,4)
 443 02a1 83C201   		addl	$1, %edx
 444 02a4 4863C2   		movslq	%edx, %rax
 445 02a7 89D1     		movl	%edx, %ecx
 446 02a9 4869C01F 		imulq	$1374389535, %rax, %rax
 446      85EB51
 447 02b0 C1F91F   		sarl	$31, %ecx
 448 02b3 48C1F825 		sarq	$37, %rax
 449 02b7 29C8     		subl	%ecx, %eax
 450 02b9 6BC064   		imull	$100, %eax, %eax
 451 02bc 29C2     		subl	%eax, %edx
 452 02be 89150000 		movl	%edx, keys_end(%rip)
 452      0000
 453 02c4 E8000000 		call	SDL_PollEvent@PLT
 453      00
 454 02c9 85C0     		testl	%eax, %eax
 455 02cb 75A7     		jne	.L33
 456              	.L36:
 457 02cd 488B4424 		movq	56(%rsp), %rax
 457      38
 458 02d2 64482B04 		subq	%fs:40, %rax
 458      25280000 
 458      00
 459 02db 750E     		jne	.L37
 460 02dd 4883C448 		addq	$72, %rsp
 461              		.cfi_remember_state
 462              		.cfi_def_cfa_offset 24
 463 02e1 5B       		popq	%rbx
 464              		.cfi_def_cfa_offset 16
 465 02e2 5D       		popq	%rbp
 466              		.cfi_def_cfa_offset 8
 467 02e3 C3       		ret
 468              	.L30:
 469              		.cfi_restore_state
 470 02e4 31C0     		xorl	%eax, %eax
 471 02e6 E8000000 		call	wrapper_exit
 471      00
 472              	.L37:
 473 02eb E8000000 		call	__stack_chk_fail@PLT
 473      00
 474              		.cfi_endproc
 475              	.LFE6517:
 476              		.size	wrapper_events, .-wrapper_events
 477              		.p2align 4
 478              		.globl	delay
 479              		.type	delay, @function
 480              	delay:
 481              	.LFB6513:
 482              		.cfi_startproc
 483 02f0 F30F1EFA 		endbr64
 484 02f4 55       		pushq	%rbp
 485              		.cfi_def_cfa_offset 16
 486              		.cfi_offset 6, -16
 487 02f5 488D2D00 		leaq	keys(%rip), %rbp
 487      000000
 488 02fc 53       		pushq	%rbx
 489              		.cfi_def_cfa_offset 24
 490              		.cfi_offset 3, -24
 491 02fd 4883EC48 		subq	$72, %rsp
 492              		.cfi_def_cfa_offset 96
 493 0301 64488B04 		movq	%fs:40, %rax
 493      25280000 
 493      00
 494 030a 48894424 		movq	%rax, 56(%rsp)
 494      38
 495 030f 31C0     		xorl	%eax, %eax
 496 0311 4889E3   		movq	%rsp, %rbx
 497              		.p2align 4,,10
 498 0314 0F1F4000 		.p2align 3
 499              	.L42:
 500 0318 4889DF   		movq	%rbx, %rdi
 501 031b E8000000 		call	SDL_PollEvent@PLT
 501      00
 502 0320 85C0     		testl	%eax, %eax
 503 0322 7459     		je	.L47
 504              	.L43:
 505 0324 8B0424   		movl	(%rsp), %eax
 506 0327 3D000100 		cmpl	$256, %eax
 506      00
 507 032c 7470     		je	.L40
 508 032e 3D000300 		cmpl	$768, %eax
 508      00
 509 0333 75E3     		jne	.L42
 510 0335 8B7C2410 		movl	16(%rsp), %edi
 511 0339 E8000000 		call	wrapper_convert_key
 511      00
 512 033e 4889DF   		movq	%rbx, %rdi
 513 0341 89C1     		movl	%eax, %ecx
 514 0343 48630500 		movslq	keys_end(%rip), %rax
 514      000000
 515 034a 4889C2   		movq	%rax, %rdx
 516 034d 894C8500 		movl	%ecx, 0(%rbp,%rax,4)
 517 0351 83C201   		addl	$1, %edx
 518 0354 4863C2   		movslq	%edx, %rax
 519 0357 89D1     		movl	%edx, %ecx
 520 0359 4869C01F 		imulq	$1374389535, %rax, %rax
 520      85EB51
 521 0360 C1F91F   		sarl	$31, %ecx
 522 0363 48C1F825 		sarq	$37, %rax
 523 0367 29C8     		subl	%ecx, %eax
 524 0369 6BC064   		imull	$100, %eax, %eax
 525 036c 29C2     		subl	%eax, %edx
 526 036e 89150000 		movl	%edx, keys_end(%rip)
 526      0000
 527 0374 E8000000 		call	SDL_PollEvent@PLT
 527      00
 528 0379 85C0     		testl	%eax, %eax
 529 037b 75A7     		jne	.L43
 530              	.L47:
 531 037d 488B4424 		movq	56(%rsp), %rax
 531      38
 532 0382 64482B04 		subq	%fs:40, %rax
 532      25280000 
 532      00
 533 038b 7518     		jne	.L48
 534 038d 8B3D0000 		movl	global_delay_ms(%rip), %edi
 534      0000
 535 0393 4883C448 		addq	$72, %rsp
 536              		.cfi_remember_state
 537              		.cfi_def_cfa_offset 24
 538 0397 5B       		popq	%rbx
 539              		.cfi_def_cfa_offset 16
 540 0398 5D       		popq	%rbp
 541              		.cfi_def_cfa_offset 8
 542 0399 E9000000 		jmp	SDL_Delay@PLT
 542      00
 543              	.L40:
 544              		.cfi_restore_state
 545 039e 31C0     		xorl	%eax, %eax
 546 03a0 E8000000 		call	wrapper_exit
 546      00
 547              	.L48:
 548 03a5 E8000000 		call	__stack_chk_fail@PLT
 548      00
 549              		.cfi_endproc
 550              	.LFE6513:
 551              		.size	delay, .-delay
 552 03aa 660F1F44 		.p2align 4
 552      0000
 553              		.globl	dgetvram
 554              		.type	dgetvram, @function
 555              	dgetvram:
 556              	.LFB6519:
 557              		.cfi_startproc
 558 03b0 F30F1EFA 		endbr64
 559 03b4 488D0500 		leaq	screen(%rip), %rax
 559      000000
 560 03bb 488907   		movq	%rax, (%rdi)
 561 03be 488906   		movq	%rax, (%rsi)
 562 03c1 C3       		ret
 563              		.cfi_endproc
 564              	.LFE6519:
 565              		.size	dgetvram, .-dgetvram
 566 03c2 66662E0F 		.p2align 4
 566      1F840000 
 566      0000000F 
 566      1F00
 567              		.globl	dclear
 568              		.type	dclear, @function
 569              	dclear:
 570              	.LFB6520:
 571              		.cfi_startproc
 572 03d0 F30F1EFA 		endbr64
 573 03d4 660F6EC7 		movd	%edi, %xmm0
 574 03d8 488D0500 		leaq	screen(%rip), %rax
 574      000000
 575 03df 660F61C0 		punpcklwd	%xmm0, %xmm0
 576 03e3 488D9000 		leaq	177408(%rax), %rdx
 576      B50200
 577 03ea 660F70C0 		pshufd	$0, %xmm0, %xmm0
 577      00
 578 03ef 90       		.p2align 4,,10
 579              		.p2align 3
 580              	.L51:
 581 03f0 0F2900   		movaps	%xmm0, (%rax)
 582 03f3 4883C020 		addq	$32, %rax
 583 03f7 0F2940F0 		movaps	%xmm0, -16(%rax)
 584 03fb 4839C2   		cmpq	%rax, %rdx
 585 03fe 75F0     		jne	.L51
 586 0400 C3       		ret
 587              		.cfi_endproc
 588              	.LFE6520:
 589              		.size	dclear, .-dclear
 590 0401 66662E0F 		.p2align 4
 590      1F840000 
 590      0000000F 
 590      1F4000
 591              		.globl	dupdate
 592              		.type	dupdate, @function
 593              	dupdate:
 594              	.LFB6521:
 595              		.cfi_startproc
 596 0410 F30F1EFA 		endbr64
 597 0414 4883EC08 		subq	$8, %rsp
 598              		.cfi_def_cfa_offset 16
 599 0418 488B3D00 		movq	texture(%rip), %rdi
 599      000000
 600 041f B9180300 		movl	$792, %ecx
 600      00
 601 0424 31F6     		xorl	%esi, %esi
 602 0426 488D1500 		leaq	screen(%rip), %rdx
 602      000000
 603 042d E8000000 		call	SDL_UpdateTexture@PLT
 603      00
 604 0432 488B3D00 		movq	renderer(%rip), %rdi
 604      000000
 605 0439 31C9     		xorl	%ecx, %ecx
 606 043b 31D2     		xorl	%edx, %edx
 607 043d 488B3500 		movq	texture(%rip), %rsi
 607      000000
 608 0444 E8000000 		call	SDL_RenderCopy@PLT
 608      00
 609 0449 488B3D00 		movq	renderer(%rip), %rdi
 609      000000
 610 0450 4883C408 		addq	$8, %rsp
 611              		.cfi_def_cfa_offset 8
 612 0454 E9000000 		jmp	SDL_RenderPresent@PLT
 612      00
 613              		.cfi_endproc
 614              	.LFE6521:
 615              		.size	dupdate, .-dupdate
 616 0459 0F1F8000 		.p2align 4
 616      000000
 617              		.globl	getkey_opt
 618              		.type	getkey_opt, @function
 619              	getkey_opt:
 620              	.LFB6522:
 621              		.cfi_startproc
 622 0460 F30F1EFA 		endbr64
 623 0464 4155     		pushq	%r13
 624              		.cfi_def_cfa_offset 16
 625              		.cfi_offset 13, -16
 626 0466 4154     		pushq	%r12
 627              		.cfi_def_cfa_offset 24
 628              		.cfi_offset 12, -24
 629 0468 4989F4   		movq	%rsi, %r12
 630 046b 55       		pushq	%rbp
 631              		.cfi_def_cfa_offset 32
 632              		.cfi_offset 6, -32
 633 046c 488D2D00 		leaq	keys(%rip), %rbp
 633      000000
 634 0473 53       		pushq	%rbx
 635              		.cfi_def_cfa_offset 40
 636              		.cfi_offset 3, -40
 637 0474 4881EC88 		subq	$136, %rsp
 637      000000
 638              		.cfi_def_cfa_offset 176
 639 047b 64488B04 		movq	%fs:40, %rax
 639      25280000 
 639      00
 640 0484 48894424 		movq	%rax, 120(%rsp)
 640      78
 641 0489 31C0     		xorl	%eax, %eax
 642 048b 4889E3   		movq	%rsp, %rbx
 643 048e 6690     		.p2align 4,,10
 644              		.p2align 3
 645              	.L60:
 646 0490 4889DF   		movq	%rbx, %rdi
 647 0493 E8000000 		call	SDL_PollEvent@PLT
 647      00
 648 0498 85C0     		testl	%eax, %eax
 649 049a 745D     		je	.L84
 650              	.L61:
 651 049c 8B0424   		movl	(%rsp), %eax
 652 049f 3D000100 		cmpl	$256, %eax
 652      00
 653 04a4 0F849901 		je	.L58
 653      0000
 654 04aa 3D000300 		cmpl	$768, %eax
 654      00
 655 04af 75DF     		jne	.L60
 656 04b1 8B7C2410 		movl	16(%rsp), %edi
 657 04b5 E8000000 		call	wrapper_convert_key
 657      00
 658 04ba 4889DF   		movq	%rbx, %rdi
 659 04bd 89C1     		movl	%eax, %ecx
 660 04bf 48630500 		movslq	keys_end(%rip), %rax
 660      000000
 661 04c6 4889C2   		movq	%rax, %rdx
 662 04c9 894C8500 		movl	%ecx, 0(%rbp,%rax,4)
 663 04cd 83C201   		addl	$1, %edx
 664 04d0 4863C2   		movslq	%edx, %rax
 665 04d3 89D1     		movl	%edx, %ecx
 666 04d5 4869C01F 		imulq	$1374389535, %rax, %rax
 666      85EB51
 667 04dc C1F91F   		sarl	$31, %ecx
 668 04df 48C1F825 		sarq	$37, %rax
 669 04e3 29C8     		subl	%ecx, %eax
 670 04e5 6BC064   		imull	$100, %eax, %eax
 671 04e8 29C2     		subl	%eax, %edx
 672 04ea 89150000 		movl	%edx, keys_end(%rip)
 672      0000
 673 04f0 E8000000 		call	SDL_PollEvent@PLT
 673      00
 674 04f5 85C0     		testl	%eax, %eax
 675 04f7 75A3     		jne	.L61
 676              	.L84:
 677 04f9 4D85E4   		testq	%r12, %r12
 678 04fc 740C     		je	.L62
 679 04fe 418B0424 		movl	(%r12), %eax
 680 0502 85C0     		testl	%eax, %eax
 681 0504 0F85F000 		jne	.L63
 681      0000
 682              	.L62:
 683 050a 488D5C24 		leaq	64(%rsp), %rbx
 683      40
 684 050f 488D2D00 		leaq	keys(%rip), %rbp
 684      000000
 685 0516 662E0F1F 		.p2align 4,,10
 685      84000000 
 685      0000
 686              		.p2align 3
 687              	.L65:
 688 0520 4889DF   		movq	%rbx, %rdi
 689 0523 E8000000 		call	SDL_PollEvent@PLT
 689      00
 690 0528 85C0     		testl	%eax, %eax
 691 052a 745E     		je	.L85
 692              	.L66:
 693 052c 8B442440 		movl	64(%rsp), %eax
 694 0530 3D000100 		cmpl	$256, %eax
 694      00
 695 0535 0F840801 		je	.L58
 695      0000
 696 053b 3D000300 		cmpl	$768, %eax
 696      00
 697 0540 75DE     		jne	.L65
 698 0542 8B7C2450 		movl	80(%rsp), %edi
 699 0546 E8000000 		call	wrapper_convert_key
 699      00
 700 054b 4889DF   		movq	%rbx, %rdi
 701 054e 89C1     		movl	%eax, %ecx
 702 0550 48630500 		movslq	keys_end(%rip), %rax
 702      000000
 703 0557 4889C2   		movq	%rax, %rdx
 704 055a 894C8500 		movl	%ecx, 0(%rbp,%rax,4)
 705 055e 83C201   		addl	$1, %edx
 706 0561 4863C2   		movslq	%edx, %rax
 707 0564 89D1     		movl	%edx, %ecx
 708 0566 4869C01F 		imulq	$1374389535, %rax, %rax
 708      85EB51
 709 056d C1F91F   		sarl	$31, %ecx
 710 0570 48C1F825 		sarq	$37, %rax
 711 0574 29C8     		subl	%ecx, %eax
 712 0576 6BC064   		imull	$100, %eax, %eax
 713 0579 29C2     		subl	%eax, %edx
 714 057b 89150000 		movl	%edx, keys_end(%rip)
 714      0000
 715 0581 E8000000 		call	SDL_PollEvent@PLT
 715      00
 716 0586 85C0     		testl	%eax, %eax
 717 0588 75A2     		jne	.L66
 718              	.L85:
 719 058a 8B050000 		movl	keys_start(%rip), %eax
 719      0000
 720 0590 3B050000 		cmpl	keys_end(%rip), %eax
 720      0000
 721 0596 7488     		je	.L65
 722 0598 4863C8   		movslq	%eax, %rcx
 723 059b 488D1500 		leaq	keys(%rip), %rdx
 723      000000
 724 05a2 83C001   		addl	$1, %eax
 725 05a5 440FB62C 		movzbl	(%rdx,%rcx,4), %r13d
 725      8A
 726 05aa 4863D0   		movslq	%eax, %rdx
 727 05ad 89C1     		movl	%eax, %ecx
 728 05af 4869D21F 		imulq	$1374389535, %rdx, %rdx
 728      85EB51
 729 05b6 C1F91F   		sarl	$31, %ecx
 730 05b9 48C1FA25 		sarq	$37, %rdx
 731 05bd 29CA     		subl	%ecx, %edx
 732 05bf 6BD264   		imull	$100, %edx, %edx
 733 05c2 29D0     		subl	%edx, %eax
 734 05c4 89050000 		movl	%eax, keys_start(%rip)
 734      0000
 735 05ca B8010000 		movl	$1, %eax
 735      00
 736              	.L68:
 737 05cf 83E001   		andl	$1, %eax
 738 05d2 41C1E518 		sall	$24, %r13d
 739 05d6 C1E015   		sall	$21, %eax
 740 05d9 4409E8   		orl	%r13d, %eax
 741 05dc 488B5424 		movq	120(%rsp), %rdx
 741      78
 742 05e1 64482B14 		subq	%fs:40, %rdx
 742      25280000 
 742      00
 743 05ea 755E     		jne	.L86
 744 05ec 4881C488 		addq	$136, %rsp
 744      000000
 745              		.cfi_remember_state
 746              		.cfi_def_cfa_offset 40
 747 05f3 5B       		popq	%rbx
 748              		.cfi_def_cfa_offset 32
 749 05f4 5D       		popq	%rbp
 750              		.cfi_def_cfa_offset 24
 751 05f5 415C     		popq	%r12
 752              		.cfi_def_cfa_offset 16
 753 05f7 415D     		popq	%r13
 754              		.cfi_def_cfa_offset 8
 755 05f9 C3       		ret
 756              	.L63:
 757              		.cfi_restore_state
 758 05fa 8B150000 		movl	keys_start(%rip), %edx
 758      0000
 759 0600 31C0     		xorl	%eax, %eax
 760 0602 3B150000 		cmpl	keys_end(%rip), %edx
 760      0000
 761 0608 74C5     		je	.L68
 762 060a 4863CA   		movslq	%edx, %rcx
 763 060d 488D0500 		leaq	keys(%rip), %rax
 763      000000
 764 0614 83C201   		addl	$1, %edx
 765 0617 440FB62C 		movzbl	(%rax,%rcx,4), %r13d
 765      88
 766 061c 4863C2   		movslq	%edx, %rax
 767 061f 89D1     		movl	%edx, %ecx
 768 0621 4869C01F 		imulq	$1374389535, %rax, %rax
 768      85EB51
 769 0628 C1F91F   		sarl	$31, %ecx
 770 062b 48C1F825 		sarq	$37, %rax
 771 062f 29C8     		subl	%ecx, %eax
 772 0631 6BC064   		imull	$100, %eax, %eax
 773 0634 29C2     		subl	%eax, %edx
 774 0636 B8010000 		movl	$1, %eax
 774      00
 775 063b 89150000 		movl	%edx, keys_start(%rip)
 775      0000
 776 0641 EB8C     		jmp	.L68
 777              	.L58:
 778 0643 31C0     		xorl	%eax, %eax
 779 0645 E8000000 		call	wrapper_exit
 779      00
 780              	.L86:
 781 064a E8000000 		call	__stack_chk_fail@PLT
 781      00
 782              		.cfi_endproc
 783              	.LFE6522:
 784              		.size	getkey_opt, .-getkey_opt
 785              		.globl	yram
 786              		.bss
 787              		.align 8
 788              		.type	yram, @object
 789              		.size	yram, 8
 790              	yram:
 791 0000 00000000 		.zero	8
 791      00000000 
 792              		.globl	xram
 793              		.align 8
 794              		.type	xram, @object
 795              		.size	xram, 8
 796              	xram:
 797 0008 00000000 		.zero	8
 797      00000000 
 798              		.globl	heap
 799              		.align 8
 800              		.type	heap, @object
 801              		.size	heap, 8
 802              	heap:
 803 0010 00000000 		.zero	8
 803      00000000 
 804              		.globl	keys_end
 805              		.align 4
 806              		.type	keys_end, @object
 807              		.size	keys_end, 4
 808              	keys_end:
 809 0018 00000000 		.zero	4
 810              		.globl	keys_start
 811              		.align 4
 812              		.type	keys_start, @object
 813              		.size	keys_start, 4
 814              	keys_start:
 815 001c 00000000 		.zero	4
 816              		.globl	keys
 817              		.align 32
 818              		.type	keys, @object
 819              		.size	keys, 400
 820              	keys:
 821 0020 00000000 		.zero	400
 821      00000000 
 821      00000000 
 821      00000000 
 821      00000000 
 822              		.globl	global_delay_ms
 823              		.align 4
 824              		.type	global_delay_ms, @object
 825              		.size	global_delay_ms, 4
 826              	global_delay_ms:
 827 01b0 00000000 		.zero	4
 828              		.globl	global_scale_factor
 829              		.align 4
 830              		.type	global_scale_factor, @object
 831              		.size	global_scale_factor, 4
 832              	global_scale_factor:
 833 01b4 00000000 		.zero	4
 834              		.globl	texture
 835              		.align 8
 836              		.type	texture, @object
 837              		.size	texture, 8
 838              	texture:
 839 01b8 00000000 		.zero	8
 839      00000000 
 840              		.globl	renderer
 841              		.align 8
 842              		.type	renderer, @object
 843              		.size	renderer, 8
 844              	renderer:
 845 01c0 00000000 		.zero	8
 845      00000000 
 846              		.globl	window
 847              		.align 8
 848              		.type	window, @object
 849              		.size	window, 8
 850              	window:
 851 01c8 00000000 		.zero	8
 851      00000000 
 852              		.globl	screen
 853 01d0 00000000 		.align 32
 853      00000000 
 853      00000000 
 853      00000000 
 854              		.type	screen, @object
 855              		.size	screen, 177408
 856              	screen:
 857 01e0 00000000 		.zero	177408
 857      00000000 
 857      00000000 
 857      00000000 
 857      00000000 
 858              		.ident	"GCC: (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0"
 859              		.section	.note.GNU-stack,"",@progbits
 860              		.section	.note.gnu.property,"a"
 861              		.align 8
 862 0000 04000000 		.long	1f - 0f
 863 0004 10000000 		.long	4f - 1f
 864 0008 05000000 		.long	5
 865              	0:
 866 000c 474E5500 		.string	"GNU"
 867              	1:
 868              		.align 8
 869 0010 020000C0 		.long	0xc0000002
 870 0014 04000000 		.long	3f - 2f
 871              	2:
 872 0018 03000000 		.long	0x3
 873              	3:
 874 001c 00000000 		.align 8
 875              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 cg50-sdl2.c
     /tmp/ccDj0fOD.s:24     .text:0000000000000000 setup
     /tmp/ccDj0fOD.s:802    .bss:0000000000000010 heap
     /tmp/ccDj0fOD.s:796    .bss:0000000000000008 xram
     /tmp/ccDj0fOD.s:790    .bss:0000000000000000 yram
     /tmp/ccDj0fOD.s:832    .bss:00000000000001b4 global_scale_factor
     /tmp/ccDj0fOD.s:826    .bss:00000000000001b0 global_delay_ms
     /tmp/ccDj0fOD.s:850    .bss:00000000000001c8 window
     /tmp/ccDj0fOD.s:844    .bss:00000000000001c0 renderer
     /tmp/ccDj0fOD.s:838    .bss:00000000000001b8 texture
     /tmp/ccDj0fOD.s:121    .text:0000000000000160 gint_osmenu
     /tmp/ccDj0fOD.s:132    .text:0000000000000170 gint_poweroff
     /tmp/ccDj0fOD.s:143    .text:0000000000000180 wrapper_exit
     /tmp/ccDj0fOD.s:358    .text:00000000000001c0 wrapper_convert_key
     /tmp/ccDj0fOD.s:406    .text:0000000000000240 wrapper_events
     /tmp/ccDj0fOD.s:820    .bss:0000000000000020 keys
     /tmp/ccDj0fOD.s:808    .bss:0000000000000018 keys_end
     /tmp/ccDj0fOD.s:480    .text:00000000000002f0 delay
     /tmp/ccDj0fOD.s:555    .text:00000000000003b0 dgetvram
     /tmp/ccDj0fOD.s:856    .bss:00000000000001e0 screen
     /tmp/ccDj0fOD.s:569    .text:00000000000003d0 dclear
     /tmp/ccDj0fOD.s:593    .text:0000000000000410 dupdate
     /tmp/ccDj0fOD.s:619    .text:0000000000000460 getkey_opt
     /tmp/ccDj0fOD.s:814    .bss:000000000000001c keys_start
     /tmp/ccDj0fOD.s:14     .rodata.str1.1:0000000000000000 .LC4
     /tmp/ccDj0fOD.s:8      .rodata.str1.8:0000000000000038 .LC2
     /tmp/ccDj0fOD.s:5      .rodata.str1.8:0000000000000000 .LC1
     /tmp/ccDj0fOD.s:18     .rodata.str1.8:00000000000000a0 .LC5
     /tmp/ccDj0fOD.s:11     .rodata.str1.8:0000000000000070 .LC3

UNDEFINED SYMBOLS
malloc
SDL_Init
SDL_CreateWindow
SDL_CreateRenderer
SDL_CreateTexture
puts
exit
SDL_GetError
__printf_chk
SDL_DestroyTexture
SDL_DestroyRenderer
SDL_DestroyWindow
SDL_Quit
__stack_chk_fail
SDL_PollEvent
SDL_Delay
SDL_UpdateTexture
SDL_RenderCopy
SDL_RenderPresent
